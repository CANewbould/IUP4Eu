--------------------------------------------------------------------------------
--	Library: iup.ew
--------------------------------------------------------------------------------
--/*
--%%disallow={camelcase}
--*/
--------------------------------------------------------------------------------
--/*
--=  Library: (iup4eu)(include)iup.ew
-- Description: Wrapper library for use with Eu4.0.5 and beyond
------
--[[[Version: 4.0.5.35
-- Euphoria Verion: v4.0.5 and later
-- Date: 2020.08.20
-- Author: Charles Newbould
-- Status: incomplete; operational]]]
-- Changes in this version:
--  * modified all procedures to functions
--  * changed all calls to ##doC##
--  * ##IupExitLoop## defined
--  * ##IupFlush## defined
--  * ##IupCalendar## defined
--  * ##IupColorbar## defined
--  * ##IupGauge## defined
--
------
--
-- Details of earlier incremental changes can be found embedded in the source
-- code at the end of this module, with the title "Previous Versions".
--
--== The Euphoria IUP Wrapper
--
-- The wrapper is called by including the module //iup.ew// in the source code.
--
-- To initialised the library call the ##IupOpen## procedure, with the single
-- parameter value which is either //""// or is set to a string value which
-- designates the folder in which the shared library (.dll or .so) is to be found.
-- This facility allows users to call 32-bit or 64-bit versions of IUP and/or
-- test their code using different versions of the source IUP library.
--
-- A typical IUP code block is as follows:
--
--<eucode>include iup.ew
-- --
-- definition of any callback functions
-- -- [definition of a main routine, containing]
-- if IupOpen(..) then
--     -- definition of the widgets;
--     -- their attributes;
--     -- associated callbacks
--     -- display of the dialog (top-level window)
--     IupMainLoop()
--     IupClose()
-- else
--     -- any desired error management
-- end if</eucode>
--
--*/
--------------------------------------------------------------------------------
--/*
--==Interface
--*/
--------------------------------------------------------------------------------
--/*
--=== Includes
--*/
--------------------------------------------------------------------------------
include iup.e           -- for IUPLIB, or abort
public include std/dll.e		-- for open_dll, call_back, define_c_func, define_c_proc, C_INT, C_POINTER
include std/machine.e	-- for allocate, allocate_pointer_array, allocate_string, free, peek_string & poke_pointer
include std/os.e		-- for platform constants
include std/text.e      -- for upper
public include std/types.e     -- for string
--------------------------------------------------------------------------------
--/*
--=== Constants
--*/
--------------------------------------------------------------------------------
--/*
--==== Events
--*/
--------------------------------------------------------------------------------
public constant IUP_CONTINUE = -4
public constant IUP_CLOSE = -3
public constant IUP_DEFAULT = -2
public constant EXIT_SUCCESS = 0    -- successful completion of IUP loop
public constant EXIT_FAILURE = 1    -- unsuccessful completion of IUP loop
public constant IUP_IGNORE = -1
--------------------------------------------------------------------------------
--/*
--====Mouse Button Values and Macros
--*/
--------------------------------------------------------------------------------
public constant IUP_BUTTON1 = '1'
public constant IUP_BUTTON2 = '2'
public constant IUP_BUTTON3 = '3'
public constant IUP_BUTTON4 = '4'
public constant IUP_BUTTON5 = '5'
--------------------------------------------------------------------------------
--/*
--==== IupPopup and IupShowXY Parameter Values
--*/
--------------------------------------------------------------------------------
public constant IUP_CURRENT = 65531
public constant IUP_CENTER = #FFFF
public constant IUP_CENTRE = IUP_CENTER
--------------------------------------------------------------------------------
--
--=== Variables
--
--------------------------------------------------------------------------------
integer hIupSetAttribute, hIupSetCallback
--------------------------------------------------------------------------------
--
--=== Types
--
--------------------------------------------------------------------------------
type attrib(string this)
    for i = 1 to length(this) do
        if not upper_case(this[i]) then return FALSE end if
    end for
    return TRUE
end type
--------------------------------------------------------------------------------
type upper_case(integer this)
    return (this > 64) and (this < 91)
end type
--------------------------------------------------------------------------------
--/*
--=== Routines
--*/
--------------------------------------------------------------------------------
--/*
--==== Management
--*/
--------------------------------------------------------------------------------
public function IupClose() -- ends access to the IUP toolkit and releases internal memory
    return doC("IupClose")
end function
--------------------------------------------------------------------------------
--/*
--Note:
--
-- ##IupClose## will also automatically destroy all dialogs and all elements
-- that have names.
--*/
--------------------------------------------------------------------------------
public function IupOpen()  -- initializes the IUP toolkit
    -- defined reusable ones
    hIupSetAttribute = define_c_proc(IUPLIB, "+IupSetAttribute",
                {C_INT, C_POINTER, C_POINTER})
    hIupSetCallback = define_c_func(IUPLIB, "+IupSetCallback",
                {C_INT, C_POINTER, C_INT}, C_INT)
    return doC("IupOpen", {C_INT, C_POINTER}, {0, 0}, C_INT)
end function
--------------------------------------------------------------------------------
--/*
--Parameter:
--# //path//: any search path required to locate desired version of the shared
-- library [Default ""]
--
--Returns:
--
-- an **atom**: the handle to the shared library
--
-- Notes:
--
--* To avoid runtime errors,
-- use the return value to test for success in finding the shared library.
--* This routine must be called before any other IUP function,
-- except IupVersion and its associated routines.
--*/
--------------------------------------------------------------------------------
public function IupVersionNumber()  -- returns the version number as an integer
    return doC("IupVersionNumber", , , C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Returns:
--
-- an **integer**: the version number including any bug fixes.
--*/
--------------------------------------------------------------------------------
--/*
--==== Dialogs
--*/
--------------------------------------------------------------------------------
public function IupAlarm(string title, string mess, string b1, object b2 = NULL, object b3 = NULL)
	sequence arg = repeat(0, 5)
	arg[1] = allocate_string(title)
	arg[2] = allocate_string(mess)
	arg[3] = allocate_string(b1)
	if string(b2) then
		arg[4] = allocate_string(b2)
		if string(b3) then
			arg[5] = allocate_string(b3)
		end if
	end if
	return doC("IupAlarm", {C_POINTER, C_POINTER, C_POINTER, C_POINTER, C_POINTER}, arg, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Shows a modal dialog containing a message and up to three buttons.
--
-- Parameters: the first button is obligatory and is named by ##b1##.
-- To set the second button set ##b2## to a text string; ditto for ##b3##.
-- (Note: you cannot set ##b3## and not ##b2##!)
--
-- Returns: an integer - the number of the button selected by the user (1, 2 or 3),
-- or 0 if failed. It fails only if ##b1## is not defined.
--
-- Example:
-- <eucode>
-- -- Example 2
--
-- include iup.ew
-- IupOpen()
--
-- constant b = IupAlarm("IupAlarm Example", "File not saved! Save it now?" ,"Yes" ,"No" ,"Cancel")
-- -- Shows a message for each selected button
-- if b = 0 then
--         IupMessage("Save file", "Dialog closed, without selection")
-- elsif b = 1 then
--         IupMessage("Save file", "File saved sucessfully - leaving program")
-- elsif b = 2 then
--         IupMessage("Save file", "File not saved - leaving program anyway")
-- elsif b = 3 then
--         IupMessage("Save file", "Operation cancelled")
-- end if
-- IupClose()
--</eucode>
--*/
--------------------------------------------------------------------------------
public function IupDialog(integer child = NULL)  -- creates a dialog element
    return doC("IupDialog", {C_INT}, {child}, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- A dialog manages user interaction with the interface elements.
-- For any interface element to be shown, it must be encapsulated in a dialog.
--
-- Parameter:
--# //child//: the (**integer**) identifier of an interface element. The dialog has only one child. It can be NULL.
--
-- Returns:
--
-- the (**integer**) identifier of the created element, or NULL if an error occurs.
--
-- See the IUP documentation for the appropriate set of Attributes.
--*/
--------------------------------------------------------------------------------
public function IupMessage(string title, string message)  -- shows a modal dialog containing a message
    return doC("IupMessage", {C_POINTER, C_POINTER},
                {allocate_string(title), allocate_string(message)})
end function
--------------------------------------------------------------------------------
--/*
-- This procedure simply creates and then pops up a ##MessageDlg##.
--
-- Parameters:
--# ##title##: the **string** to put in the title
--# ##message##: the **string** to put in the body of the dialog
--
-- Notes:
--
-- The ##Message## routine shows a dialog centralised on the screen, showing
-- the message and the "OK" button.
-- The '\n' character can be added to the message to indicate a line change.
--
-- The dialog uses a global attribute called "PARENTDIALOG" as the parent
-- dialog if it is defined.
-- It also uses a global attribute called "ICON" as the dialog icon if it is
-- defined (used only in Motif; in Windows MessageBox does not have an icon in
-- the title bar).
--*/
--------------------------------------------------------------------------------
--/*
--==== Dialog actions
--*/
--------------------------------------------------------------------------------
public function IupShow(integer dialog)   -- displays a dialog in the current display space
    return doC("IupShow", {C_INT}, {dialog}, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Parameter:
--# //dialog//: the dialog to be displayed
--
-- Returns:
--
-- IUP_NOERROR if successful. If there was an error returns IUP_ERROR.
--
-- Notes:
--
-- For dialogs it is equivalent to call IupShowXY using IUP_CURRENT.
-- See ##IupShowXY## for more details.
--
-- For other controls, to call ##IupShow ##is the same as setting VISIBLE=YES.
--
-- See the IUP documentation for the appropriate set of Attributes.
--*/
--------------------------------------------------------------------------------
public function IupShowXY(integer dialog, integer x, integer y)   -- displays a dialog in a specific position
    return doC("IupShowXY", {C_INT, C_INT, C_INT}, {dialog, x, y}, C_INT)
end function
--------------------------------------------------------------------------------
-- Displays a dialog in a given position on the screen. The values x and y give
-- the horizontal and vertical positions respectively of the top left corner of
-- the window, relative to the origin of the main screen.
--
-- Parameters: //dlg// - identifier of the dialog;
-- //x//, //y// - co-ordinates from the top left corner of the window,
-- relative to the origin of the main screen.
--
-- The following definitions can also be used for ##x##:
--* IUP_LEFT: Positions the dialog on the left corner of the main screen
--* IUP_CENTER: Horizontally centralizes the dialog on the main screen
--* IUP_RIGHT: Positions the dialog on the right corner of the main screen
--* IUP_MOUSEPOS: Positions the dialog on the mouse position
--* IUP_CENTERPARENT: Horizontally centralizes the dialog relative to its parent (Since 3.0)
--* IUP_CURRENT: use the current position of the dialog. This is the default value in Lua if the parameter is not defined. (Since 3.0)
--
-- The following definitions can also be used for ##y##:
--* IUP_TOP: Positions the dialog on the top of the main screen
--* IUP_CENTER: Vertically centralizes the dialog on the main screen
--* IUP_BOTTOM: Positions the dialog on the base of the main screen
--* IUP_MOUSEPOS: Positions the dialog on the mouse position
--* IUP_CENTERPARENT: Vertically centralizes the dialog relative to its parent (Since 3.0)
--* IUP_CURRENT: use the current position of the dialog. This is the default value in Lua if the parameter is not defined.(Since 3.0)
--------------------------------------------------------------------------------
public function IupDestroy(integer widget)  -- destroys an interface element and all its children
    return doC("IupDestroy", {C_INT}, {widget})
end function
--------------------------------------------------------------------------------
--/*
-- Only dialogs, timers, popup menus and images should be normally destroyed,
-- but detached controls can also be destroyed.
--
-- Parameter:
--# //widget//: the control to be destroyed
--
-- Notes:
--
-- The procedure ##destroy## will automatically unmap and detach the element,
-- if necessary, and then destroy the element.
--
-- This routine also deletes the main names associated to the interface element
-- being destroyed, but if it has more than one name then some names may be
-- left behind.
--
-- Menu bars associated with dialogs are automatically destroyed when the dialog
-- is destroyed.
--
-- Images associated with controls are NOT automatically destroyed,
-- because images can be reused in several controls the application must
-- destroy them when they are not used anymore.
--
-- All dialogs and all elements that have names are automatically destroyed when
-- #close## is invoked.
--*/
--------------------------------------------------------------------------------
--/*
--==== Containers
--*/
--------------------------------------------------------------------------------
public function IupBackgroundBox(atom child = NULL) -- creates a simple native container with no decorations
    return doC("IupBackgroundBox", {C_INT}, {child}, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Parameter:
--# ##child##: Identifier of an interface element which will receive the box.
-- It can be NULL.
--
-- Returns: the identifier of the created element, or NULL if an error occurs.
--------------------------------------------------------------------------------
public function IupCbox(sequence children = {})  -- creates a void container for position elements in absolute coordinates. It is a concrete layout container.
    return doCN("IupCbox", C_INT, children, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- ##IupCbox## does not have a native representation.
--
-- ##IupCbox## is the equivalent of an ##IupVbox## or an ##IupHbox##
-- where all the children have the FLOATING attribute set to YES,
-- but children must use CX and CY attributes instead of the POSITION attribute.
--
-- Parameter:
--# //children//: an array of compositional elements to be displayed in the box.
-- It can be empty (the default).
--
-- Returns:
--
-- the identifier of the created element, or NULL if an error occurs.
--
-- See the IUP documentation for the appropriate set of Attributes.
--*/
--------------------------------------------------------------------------------
public function IupDetachBox(integer child = NULL)
    return doC("IupDetachBox", {C_INT}, {child}, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Creates a detachable void container.
--
-- Dragging and dropping this element, it creates a new dialog composed by
-- its child or elements arranged in it (for example, a child like {{{IupVbox or
-- IupHbox).}}} During the drag, the ESC key can be pressed to cancel the action.
--
-- It does not have a native representation, but it contains also a {{{IupCanvas}}}
-- to implement the bar handler.
--
-- Parameter: ##child## - Identifier of an interface element.
-- It can be NULL.
--
-- Returns: the identifier of the created element, or NULL if an error occurs.
--*/
--------------------------------------------------------------------------------
public function IupFrame(atom child = NULL)	-- creates a native container, which draws a frame with a title around its child
    return doC("IupFrame", {C_INT}, {child}, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Parameter:
--# ##child##: Identifier of an interface element which the frame surrounds.
-- It can be NULL.
--
-- Returns: the identifier of the created element, or NULL if an error occurs.
--------------------------------------------------------------------------------
public function IupHbox(sequence children = {})  -- creates a void container for composing elements horizontally; it is a box that arranges the elements it contains from left to right.
    return doCN("IupHbox", C_INT, children, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- ##Hbox## does not have a native representation.
--
-- Parameter:
--# //children//: an array of compositional elements to be displayed in the box.
-- It can be empty (the default).
--
-- Returns:
--
-- the identifier of the created element, or NULL if an error occurs.
--
-- See the IUP documentation for the appropriate set of Attributes.
--*/
--------------------------------------------------------------------------------
public function IupVbox(sequence children = {})  -- creates a void container for composing elements vertically; it is a box that arranges the elements it contains from top to bottom.
    return doCN("IupVbox", C_INT, children, C_INT)
end function
--------------------------------------------------------------------------------
public function IupVboxv(sequence children = {})  -- creates a void container for composing elements vertically; it is a box that arranges the elements it contains from top to bottom.
	atom p_children = allocate_pointer_array(children)
	sequence e_args = {p_children}
	free(p_children)
    return doC("IupVboxv", {C_POINTER}, e_args, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- ##Vbox## does not have a native representation.
--
-- Parameter:
--# //children//: an array of compositional elements to be displayed in the box.
-- It can be empty (the default).
--
-- Returns:
--
-- the identifier of the created element, or NULL if an error occurs.
--
-- See the IUP documentation for the appropriate set of Attributes.
--*/
--------------------------------------------------------------------------------
public function IupTabs(sequence children = {})  -- creates a void container for composing elements vertically; it is a box that arranges the elements it contains from top to bottom.
    return doCN("IupTabs", C_INT, children, C_INT)
end function
--------------------------------------------------------------------------------
--/*
--*/
--------------------------------------------------------------------------------
--/*
--==== Controls
--*/
--------------------------------------------------------------------------------
public function IupButton(string title = "", object action = NULL)  -- creates a button interface element, which displays a separator, a text or an image
	sequence arg
	if atom(action) then
		arg = {allocate_string(title), action}
	else
		arg = {allocate_string(title), allocate_string(action)}
	end if
	return doC("IupButton", {C_POINTER, C_POINTER}, arg, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Parameters:
--# //title//: the text to be shown on the button.
-- It can be EMPTY. It will set the TITLE attribute.
--# //action//: the name of the action generated when the button is selected.
-- It can be NULL.
--
-- Returns:
--
-- the (**integer**) identifier of the created element, or NULL if an error
-- occurs.
--
-- See the IUP documentation for the appropriate set of Attributes.
--*/
--------------------------------------------------------------------------------
public function IupCalendar() -- creates a month calendar interface element, where the user can select a date
    return doC("IupCalendar", , , C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Returns:
--
-- the identifier of the created element, or NULL if an error occurs.
--
-- See the IUP documentation for the appropriate set of Attributes.
--*/
--------------------------------------------------------------------------------
public function IupColorbar() -- creates a color palette to enable a color selection from several samples
    return doC("IupColorbar", , , C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Returns:
--
-- the identifier of the created element, or NULL if an error occurs.
--
-- See the IUP documentation for the appropriate set of Attributes.
--*/
--------------------------------------------------------------------------------
public function IupFill() 	-- creates a void element, which dynamically occupies empty spaces always trying to expand itself
	return doC("IupFill", , , C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Its parent should be an IupHbox, an IupVbox or a IupGridBox, or else this
-- type of expansion will not work.
-- If //EXPAND// is set on at least one of the other children of the box, then
-- the fill expansion is ignored.
--
-- Returns: the identifier of the created element, or NULL if an error occurs.
--*/
--------------------------------------------------------------------------------
public function IupFlatButton(string title = "")  -- creates an interface element that is a button, but it does not have native decorations
	return doC("IupFlatButton", {C_POINTER}, {allocate_string(title)}, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Parameter:
--# //title//: the text to be shown on the button.
-- It can be EMPTY. It will set the TITLE attribute.
--
-- Returns:
--
-- the (**integer**) identifier of the created element, or NULL if an error
-- occurs.
--
-- See the IUP documentation for the appropriate set of Attributes.
--*/
--------------------------------------------------------------------------------
public function IupGauge() -- creates a Gauge control
    return doC("IupGauge", , , C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Returns:
--
-- the identifier of the created element, or NULL if an error occurs.
--
-- See the IUP documentation for the appropriate set of Attributes.
--*/
--------------------------------------------------------------------------------
public function IupLabel(string title = "")  -- creates a label interface element, which displays a separator, a text or an image
	return doC("IupLabel", {C_POINTER}, {allocate_string(title)}, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Parameter:
--# //title//: the text to be shown on the label. It can be EMPTY. It will set the TITLE attribute.
--
-- Returns:
--
-- the (**integer**) identifier of the created element, or NULL if an error occurs.
--
-- See the IUP documentation for the appropriate set of Attributes.
--*/
--------------------------------------------------------------------------------
public function IupText(object action = NULL)  -- creates an editable text field
    return doC("IupText", {C_POINTER}, {toCOrNot(action)}, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Parameter:
--# ##action##: the name of the action generated when the user types something,
-- or //NULL/.
--
-- Returns: the (**integer**) identifier of the created element, or //NULL// if an error occurs.
--*/
--------------------------------------------------------------------------------
--/*
--==== Menus
--*/
--------------------------------------------------------------------------------
public function IupMenu(sequence items)
	atom pItems = allocate_pointer_array(items)
	atom result = doC("IupMenuv", {C_POINTER}, {pItems}, C_INT)
	free(pItems)
	return result
end function
--------------------------------------------------------------------------------
--/*
-- Creates a menu element, which groups 3 types of interface elements:
-- item, submenu and separator.
-- Any other interface element defined inside a menu will be an error.
--
-- Parameter: //items// - sequence containing one or more items in the menu.
-- It can be empty.
--
-- Returns: the identifier of the created element, or NULL if an error occurs.
--*/
--------------------------------------------------------------------------------
public function IupItem(object title = NULL, object action = NULL)
	sequence arg = {NULL, action}
    if sequence(title) then
        arg[1] = allocate_string(title)
    end if
    if sequence(action) then
        arg[2] = allocate_string(action)
    end if
    return doC("IupItem", {C_POINTER, C_POINTER}, arg, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Creates an item of the menu interface element.
-- It is so created that to generate an action, when selected, a specific
-- call-back function is needed.
--
-- Parameter: ##title## - text to be shown on the toggle. It can be NULL.
-- It will set the TITLE attribute.
--
-- Returns: the identifier of the created element, or NULL if an error occurs.
--*/
--------------------------------------------------------------------------------
public function IupSeparator()
	return doC("IupSeparator", , , C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Creates the separator interface element.
--It shows a line between two menu items.
--
-- Returns: the identifier of the created element, or NULL if an error occurs.
--*/
--------------------------------------------------------------------------------
export function IupSubmenu(object title = NULL, object menu = NULL)
	sequence arg = {NULL, menu}
    if sequence(title) then
        arg[1] = allocate_string(title)
    end if
	return doC("IupSubmenu", {C_POINTER, C_INT}, arg, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Creates a menu item that, when selected, opens another menu.
--
-- Parameters:
--* ##title## - text to be shown on the toggle. It can be NULL.
-- It will set the TITLE attribute.
--* ##menu## - optional child menu identifier. It can be NULL.
--
-- Returns: the identifier of the created element, or NULL if an error occurs.
--*/
--------------------------------------------------------------------------------
--/*
-- Example, using all menu elements:
-- <eucode>
-- --menus.exw
--
-- include iup.ew
--
-- function selected_cb(atom self)
--     IupMessage("IupMenu", "You selected: " & IupGetAttribute(self, "TITLE") & "!")
--     return IUP_CONTINUE
-- end function
--
-- function exit_cb()
--     return IUP_CLOSE
-- end function
--
-- IupOpen()
--
-- constant
-- 	item_open = IupItem("&Open"),
-- 	item_save = IupItem("&Save"),
-- 	item_undo = IupItem("&Undo"),
-- 	item_exit = IupItem("E&xit"),
-- 	menu_file = IupMenu({item_open, item_save, item_undo, IupSeparator(), item_exit}),
-- 	sub1_menu = IupSubmenu("File", menu_file),
-- 	menu = IupMenu({sub1_menu})
--
-- IupSetHandle("mymenu", menu)
--
-- constant dlg = IupDialog(IupCanvas())
--
-- IupSetAttribute(item_undo, "ACTIVE", "NO")
-- IupSetCallback(item_exit, "ACTION", Icallback(routine_id("exit_cb")))
-- IupSetCallback(item_open, "ACTION", Icallback(routine_id("selected_cb")))
-- IupSetCallback(item_save, "ACTION", Icallback(routine_id("selected_cb")))
-- IupSetAttributes(dlg, "SIZE = HALFxHALF, TITLE = Menus, MENU = mymenu")
--
-- IupShow(dlg)
-- IupMainLoop()
--
-- IupClose()
-- </eucode>
--*/
--------------------------------------------------------------------------------
--/*
--==== Events
--*/
--------------------------------------------------------------------------------
public function IupExitLoop() -- terminates the current message loop
    return doC("IupExitLoop")
end function
--------------------------------------------------------------------------------
--/*
-- It has the same effect of a callback returning IUP_CLOSE.
--*/
--------------------------------------------------------------------------------
public function IupFlush() -- processes all pending messages in the message queue
    return doC("IupFlush")
end function
--------------------------------------------------------------------------------
public function IupMainLoop()  -- executes the user interaction until a callback returns IUP_CLOSE, or IupExitLoop is called, or the last visible dialog is hidden
	return doC("IupMainLoop", , , C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Returns:
--
-- IUP_NOERROR always.
--*/
--------------------------------------------------------------------------------
--/*
--==== Attributes
--*/
--------------------------------------------------------------------------------
public function IupGetAttribute(atom widget, string attr) -- gets an interface element attribute
    atom ret = doC("IupGetAttribute", {C_INT, C_POINTER}, {widget, allocate_string(attr)}, C_INT)
    if ret then return peek_string(ret)
    else return ret
    end if
end function
--------------------------------------------------------------------------------
--/*
-- Use only when the attribute value is a string.
--
-- (For other value types use the relevant function. For example:
-- for an integer value use {{{IupGetInt}}}.)
--
-- Returns: the attribute value or
-- NULL, if the attribute is not set or does not exist.
--*/
--------------------------------------------------------------------------------
public function IupGetInt(atom widget, string attr)	-- gets an integer attribute value
    return doC("IupGetInt", {C_INT, C_POINTER}, {widget, allocate_string(attr)}, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Gets the attribute value, where this is an integer.
--
-- Use upper-case for the attribute.
--
-- Returns: the integer value of an interface element attribute.
--*/
--------------------------------------------------------------------------------
public procedure IupSetAttribute(integer widget, string attribute, object val = NULL)    -- sets an interface element attribute to the stated val(ue)
    if not attrib(attribute) then attribute = upper(attribute) end if
    sequence arg = {widget, allocate_string(attribute), val}
    if string(val) then arg[3] = allocate_string(val) end if
    c_proc(hIupSetAttribute, arg)
end procedure
--------------------------------------------------------------------------------
--/*
-- Parameters:
--# //widget//: identifier of the interface element. If NULL will set the
-- attribute in the global environment
--# //attribute//: the (upper-case) name of the attribute to change. If the name
-- is given in the wrong case then it will be converted to upper-case.
--# //val: the value to be set.
-- If NULL then the default value for that attribute will be used.
--
-- See the IUP documentation for the appropriate set of Attributes.
--*/
--------------------------------------------------------------------------------
public function IupSetAttributes(atom widget, string attributes)  -- sets several attributes of an interface element
    return doC("IupSetAttributes", {C_INT, C_POINTER}, {widget, allocate_string(attributes)},  C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Parameters:
--# //widget//: identifier of the interface element.
--# //attributes//: the attributes in the format "v1=a1, v2=a2,..." where vi is
-- the name of an attribute and ai is its value
--
-- Returns:
--
--  an **integer**: the (same) identifier
--
-- See the IUP documentation for the appropriate set of Attributes.
--*/
--------------------------------------------------------------------------------
public function IupSetAttributeHandle(atom widget, string attribute, atom ih_named)    -- creates a non conflict name and associates the name with the attribute
    if not attrib(attribute) then attribute = upper(attribute) end if
    return doC("IupSetAttributeHandle", {C_INT, C_POINTER, C_INT}, {widget, allocate_string(attribute), ih_named})
end function
--------------------------------------------------------------------------------
--/*
-- Parameters:
--# //widget//: identifier of the interface element.
--# //attribute//: the (upper-case) name of the attribute to change. If the name
-- is given in the wrong case then it will be converted to upper-case.
--# //ih_named// element to associate using a name
--
-- See the IUP documentation for the appropriate set of Attributes.
--*/
--------------------------------------------------------------------------------
public function IupSetGlobal(string name, object val)
    sequence args = {allocate_string(name), val}
    if sequence(val) then
        args[2] = allocate_string(val)
    end if
    return doC("IupSetGlobal", {C_POINTER, C_POINTER}, args)
end function
--------------------------------------------------------------------------------
--/*
-- Sets an attribute in the public environment.
-- If the driver process the attribute then it will not be stored internally.
--
-- Use upper-case for the attribute.
--
-- If the value is set to NULL (as it is by default) then the attribute setting
-- will be removed.
--*/
--------------------------------------------------------------------------------
public function IupSetInt(atom widget, string attr, integer val)
    return doC("IupSetInt", {C_INT, C_POINTER, C_INT}, {widget, allocate_string(attr), val})
end function
--------------------------------------------------------------------------------
--/*
-- Sets the integer value of an interface element attribute.
--*/
--------------------------------------------------------------------------------
--/*
--==== Call back handling
--*/
--------------------------------------------------------------------------------
public function Icallback(string name, atom rid = routine_id(name)) -- converts a routine_id to the appropriate form
    return call_back({'+', rid})
end function
--------------------------------------------------------------------------------
--/*
-- Parameter:
--# ##name##: the identifier of the appropriate callback routine for the given
-- action.
--
-- Returns: the callback.
--------------------------------------------------------------------------------
public function IupSetCallback(atom widget, string action, atom rid)  -- associates a callback to an event
	sequence arg = {widget, allocate_string(action), rid}
	return c_func(hIupSetCallback, arg)
end function
--------------------------------------------------------------------------------
--/*
-- Parameters:
--# ##widget##: the (**integer**) identifier of an interface element
--# ##action##: the name of the action to be trapped
--# ##rid##: the id of the routine to be called when the action occurs
--
-- Returns: the address of the previous function associated with the action
--
--*/
--------------------------------------------------------------------------------
--/*
--==== Handles
--*/
--------------------------------------------------------------------------------
public function IupGetHandle(string title)    -- get handle from name
    return doC("IupGetHandle", {C_POINTER}, {allocate_string(title)}, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Returns the identifier of an interface element that has an associated name
-- using {{{IupSetHandle.}}}
--
-- Parameter: the ##title## of an interface element.
--
-- Returns: the element handle or NULL if not found.
--*/
--------------------------------------------------------------------------------
public function IupSetHandle(string title, atom ih)    -- associate name with a handle
    return doC("IupSetHandle", {C_POINTER, C_INT}, {allocate_string(title), ih})
end function
--------------------------------------------------------------------------------
--/*
-- Associates a name with an interface element.
--
-- Parameters:
--* ##title## - name of the interface element;
--* ##ih## - identifier of the interface element.
-- Use NULL to remove the association.
--*/
--------------------------------------------------------------------------------
--/*
--==== Resources
--*/
--------------------------------------------------------------------------------
public function allocate_image(sequence data, integer cleanup = 0)
	atom buff = allocate_data(length(data), cleanup)
	poke(buff, data)
    return buff
end function
--------------------------------------------------------------------------------
--/*
-- Creates an image to be shown on a label, button, toggle, or as a cursor.
--
-- Parameters: ##width## - image width in pixels;
-- ##height## - image height in pixels;
-- ##pixels## - vector containing the value of each pixel.
--
--* {{{IupImage}}} uses 1 value per pixel,
--* IupImageRGB uses 3 values and
--* IupImageRGBA uses 4 values per pixel.
--
-- Returns: the identifier of the created element, or NULL if an error occurs.
--*/
--------------------------------------------------------------------------------
public function IupGetDialog(integer handle)
    return doC("IupGetDialog", {C_INT}, {handle}, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- Gets the handle of the dialog that contains that interface element.
-- It works also for children of a menu that is associated with a dialog.
--
-- Parameter: the ##handle## to an interface element.
--
-- Returns: the handle of the dialog or NULL if not found.
--*/
--------------------------------------------------------------------------------
public function IupImage(atom width, atom height, object pixmap)
    return doC("IupImage", {C_INT, C_INT, C_POINTER}, {width, height, pixmap}, C_INT)
end function
--------------------------------------------------------------------------------
--/*
-- == Layout (hierarchy)
--*/
--------------------------------------------------------------------------------
public function IupReparent(integer child, integer new_parent, integer ref_child)
    return doC("IupReparent", {C_INT, C_INT, C_INT}, {child, new_parent, ref_child})
end function
--------------------------------------------------------------------------------
--/*
-- Moves an interface element from one position in the hierarchy tree to another.
--
-- Parameters: ##child##: Identifier of the element to be moved,
-- ##new_parent##: Identifier of the new parent
-- ##ref_child##: Identifier of the element to be used as reference, where
-- the child will be inserted before it. It can be NULL.
--*/
--------------------------------------------------------------------------------
--/*
-- == Layout (management)
--*/
--------------------------------------------------------------------------------
public function IupRefresh(atom dialog)
    return doC("IupRefresh", {C_INT}, {dialog})
end function
--------------------------------------------------------------------------------
--/*
-- Updates the size and layout of all controls in the same ##dialog##.
--
-- To be used after changing size attributes, or attributes that affect the
-- size of the control. Can be used for any element inside a dialog, but the
-- layout of the dialog and all controls will be updated.
-- It can change the layout of all the controls inside the dialog because of
-- the dynamic layout positioning.
--*/
--------------------------------------------------------------------------------
-- Previous versions
--------------------------------------------------------------------------------
--[[[Version: 4.0.5.34
-- Euphoria Verion: v4.0.5 and later
-- Date: 2020.08.19
-- Author: Charles Newbould
-- Status: incomplete; operational]]]
-- Changes in this version:
--  * ##IupGetAttribute## defined
--  * ##IupSetInt## defined
--  * //dll.e// made public, to pass on //NULL//
--  * ##IupGetDialog## defined
--  * ##IupReparent## defined
--  * ##IupRefresh## defined
--  * ##IupDetachBox## defined
--------------------------------------------------------------------------------
--[[[Version: 4.0.5.33
-- Euphoria Version: v4.0.5 and later
-- Date: 2020.07.04
-- Author: Charles Newbould
-- Status: incomplete; operational]]]
-- Changes in this version:
--  * ##IupCbox## defined
--  * ##IupFlatButton## defined
--------------------------------------------------------------------------------
--[[[Version: 4.0.5.32
-- Euphoria Version: v4.0.5 and later
-- Date: 2020.06.28
-- Author: Charles Newbould
-- Status: incomplete; operational]]]
-- Changes in this version:
--------------------------------------------------------------------------------
--  * ##IupBackgroundBox## defined
--[[[Version: 4.0.5.31
-- Euphoria Version: v4.0.5 and later
-- Date: 2020.05.15
-- Author: Charles Newbould
-- Status: incomplete; operational]]]
-- Changes in this version:
--  * ##IupTabs## simplified
--------------------------------------------------------------------------------
--[[[Version: 4.0.5.30
-- Euphoria Version: v4.0.5 and later
-- Date: 2020.05.09
-- Author: Charles Newbould
-- Status: incomplete; operational]]]
-- Changes in this version:
--  * ##IupText## simplified
--  * ##IupLabel## simplified
--  * //IupFill## simplified
--  * ##IupSeparator## simplified
--  * ##IupVbox## defined
--  * ##IupVboxv## re-defined
--  * ##IupMessage## simplified
--  * ##IupDestroy## simplified
--------------------------------------------------------------------------------
--[[[Version: 4.0.5.29
-- Euphoria Version: v4.0.5 and later
-- Date: 2020.05.0
-- Author: Charles Newbould
-- Status: incomplete; operational]]]
-- Changes in this version:
--  * modified to call //iup.e// at the outset
--  * ##IupOpen## changed accordingly
--  * ##IupVersionNumber## modified
--  * ##IupHbox## re-defined, to adopt precise IUP definition
--  * ##IupDialog## modified
--  * ##IupShow## modified
--  * ##IupShowXY## modified
--  * ##IupMessage## modified
--  * ##IupFrame## modified
--------------------------------------------------------------------------------
--[[[Version: 4.0.5.28
-- Euphoria Version: v4.0.5 and later
-- Date: 2020.05.05
-- Author: Charles Newbould
-- Status: incomplete; operational]]]
-- Changes in this version:
--* ##IupGetHandle## defined
--* ##IupGetInt## defined
--* ##IupGetInt## defined
--* ##IupSetGlobal## defined
--* Mouse button constants added
--------------------------------------------------------------------------------
--[[[Version: 4.0.5.26
-- Euphoria Version: v4.0.5 and later
-- Date: 2020.04.24
-- Author: Charles Newbould
-- Status: incomplete; operational]]]
-- Changes in this version:
--* //IUP_CONTINUE// defined
--* ##IupHbox## defined
--* ##IupText## defined
--------------------------------------------------------------------------------
--[[[Version: 4.0.5.27
-- Euphoria Version: v4.0.5 and later
-- Date: 2020.04.28
-- Author: Charles Newbould
-- Status: incomplete; operational]]]
-- Changes in this version:
--* ##IupFrame## defined
--* ##IupFill## defined
--------------------------------------------------------------------------------
--[[[Version: 4.0.5.25
-- Euphoria Version: v4.0.5 and later
-- Date: 2020.04.05
-- Author: Charles Newbould
-- Status: incomplete; operational]]]
-- Changes in this version:
--* ##IupItem## defined
--* ##allocate_image## defined
--* ##IupImage## defined
--------------------------------------------------------------------------------
--[[[Version: 4.0.5.24
-- Euphoria Version: v4.0.5 and later
-- Date: 2020.04.04
-- Author: Charles Newbould
-- Status: incomplete; operational]]]
-- Changes in this version:
--* ##IupShowXY## defined
--* ##IupMenu## defined
--* ##IupSeparator## defined
--* ##IupSetHandle## defined
--* ##IupSubmenu## defined
--------------------------------------------------------------------------------
--[[[Version: 4.0.5.23
-- Euphoria Version: v4.0.5 and later
-- Date: 2020.03.31
-- Author: Charles Newbould
-- Status: incomplete; operational]]]
-- Changes in this version:
--* ##IupButton## defined
--* ##IupVbox## defined
--* ##IupDialog## defined
--* ##IupShow## defined
--* ##IupMainLoop## defined
--* ##IupSetAttribute## defined
--* ##IupLabel## defined
--* ##IupSetCallback## defined
--* ##Icallback## defined
--* ##IupSetAttributes## defined
--* ##IupSetAttributeHandle## defined
--* ##IupDestroy## defined
--------------------------------------------------------------------------------
--[[[Version: 4.0.5.22
-- Euphoria Version: v4.0.5 and later
-- Date: 2020.03.28
-- Author: Charles Newbould
-- Status: incomplete; operational]]]
-- Changes in this version:
--* ##IupAlarm## defined
--* ##IupMessage## defined
--------------------------------------------------------------------------------
--[[[Version: 4.0.5.21
-- Euphoria Version: v4.0.5 and later
-- Date: 2020.03.14
-- Author: Charles Newbould
-- Status: incomplete; operational]]]
-- Changes in this version:
--* ##IupOpen## turned into a function
--* ##IupVersionNumber## defined
--------------------------------------------------------------------------------
--[[[Version: 4.0.5.20
-- Euphoria Version: v4.0.5 and later
-- Date: 2020.03.13
-- Author: Charles Newbould
-- Status: incomplete; operational]]]
-- Changes in this version:
--* rebuilt from various previous versions
--* incorporated former ##init## into ##IupOpen##
--------------------------------------------------------------------------------
